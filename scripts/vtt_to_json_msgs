#!/usr/bin/env python

# Script to process a WebVTT file and output a series of JSON messages.
# These messages can then be piped into an MQTT client to publish to the
# message bus. For example, the following invocation approximately simulates
# output from the ToMCAT ASR agent using a VTT file.
#
#     ./vtt_to_json_msgs <filename> | mosquitto_pub -t agent/asr -l

# Author: Adarsh Pyarelal (adarsh@arizona.edu)

import json
import datetime
from pathlib import Path

import webvtt

if __name__ == "__main__":
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

    parser = ArgumentParser(
        description="Tool to convert WebVTT files to JSON messages",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument("file", help="Input filepath")
    parser.add_argument("--experiment_id", help="Experiment ID")
    parser.add_argument("--trial_id", help="Trial ID")
    args = parser.parse_args()

    for caption in webvtt.read(args.file):

        # If a speaker is identified, extract the speaker.
        text_components = caption.text.rsplit(": ", 1)
        speaker = text_components[0] if len(text_components) > 1 else None

        # Extract the text
        text = (
            text_components[1]
            if len(text_components) > 1
            else text_components[0]
        )

        timestamp = f"{datetime.datetime.utcnow().isoformat()}Z"
        message = {
            "header": {"timestamp": timestamp, "version": "0.1"},
            "msg": {
                "timestamp": timestamp,
                "experiment_id": args.experiment_id,
                "trial_id": args.trial_id,
                "message_type": "observation",
                "version": "0.1",
                "source": "vtt_to_json_msgs_script",
            },
            "data": {
                "asr_system": "Zoom",
                "source_filename": Path(args.file).name,
                "participant_id": speaker,
                "caption_start": caption.start,
                "caption_end": caption.end,
                "text": text,
            },
        }

        print(json.dumps(message))
