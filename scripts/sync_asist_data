#!/usr/bin/env python3

import os
from subprocess import run
from pathlib import Path

# Get the path to the data directory, assuming that the repo directory
# structure is mirrored.

def sync_asist_data(gcs_dir):
    data_dir = (
        Path(os.path.dirname(os.path.realpath(__file__))).parent / "data/studies.aptima.com" / gcs_dir
    )

    os.makedirs(data_dir, exist_ok=True)

    extensions_to_exclude = {
        "sav",
        "pdf",
        "qsf",
        "mp4",
        "m4a",
        "metadata",
        "tsv",
        "png",
        "PNG",
        "xlsx",
        "zip",
        "csv",
        "fov",
        "docx",
    }

    if gcs_dir=="study-2_pilot-2_2021.02":
        extensions_to_exclude.remove("metadata")

    # Construct a regex for gsutil rsync exclusion
    exclusion_regex = (
        "$|".join((f".*\.{ext}" for ext in extensions_to_exclude)) + "$"
    )

    run(
        [
            "gsutil",
            "-m",
            "rsync",
            "-r",
            "-x",
            exclusion_regex,
            f"gs://studies.aptima.com/{gcs_dir}",
            data_dir,
        ],
        cwd=data_dir,
    )

if __name__ == "__main__":
    from argparse import ArgumentParser, ArgumentDefaultsHelpFormatter

    parser = ArgumentParser(
        description="sync_asist_data",
        formatter_class=ArgumentDefaultsHelpFormatter,
    )

    parser.add_argument(
        "gcs_dir", type=str, help="GCS directory to sync",
        choices=("study-1_2020.08", "study-2_pilot-2_2021.02")
    )
    args = parser.parse_args()

    # Study 1 GCS dir: study-1_2020.08
    # Study 2 pilot GCS dir: study-2_pilot-2_2021.02

    sync_asist_data(args.gcs_dir)
